version: "3"

vars: &_vars_
  GREETING: Conda Package Manager Tasks
  # ---- expect real config file paths from layout ----
  #  - CONDA_LIB_CONFIG_YML
  #  - INFOS_CONFIG_YML
  # ---- read actual project configurations values ----
  META_BASE_ENV_NAME:
    sh: "yq4 .META_BASE_ENV_NAME {{.CONDA_LIB_CONFIG_YML}}"
  META_DEV_ENV_NAME:
    sh: "yq4 .META_DEV_ENV_NAME {{.CONDA_LIB_CONFIG_YML}}"
  META_TEST_ENV_NAME:
    sh: "yq4 .META_TEST_ENV_NAME {{.CONDA_LIB_CONFIG_YML}}"
  META_WORK_ENV_NAME:
    sh: "yq4 .META_WORK_ENV_NAME {{.CONDA_LIB_CONFIG_YML}}"
  META_BUILD_ENV_NAME:
    sh: "yq4 .META_BUILD_ENV_NAME {{.CONDA_LIB_CONFIG_YML}}"
  CONDA_PACKAGE_FILE_EXT:
    sh: "yq4 .CONDA_PACKAGE_FILE_EXT {{.CONDA_LIB_CONFIG_YML}}"
  LOCAL_CONDA_BUILD_DIR:
    sh: "yq4 .LOCAL_CONDA_BUILD_DIR {{.CONDA_LIB_CONFIG_YML}}"
  LOCAL_CONDA_ENVS_DIR:
    sh: "yq4 .LOCAL_CONDA_ENVS_DIR {{.CONDA_LIB_CONFIG_YML}}"
  PACKAGE_META_YAML_PATH:
    sh: "yq4 .PACKAGE_META_YAML_PATH {{.CONDA_LIB_CONFIG_YML}}"
  PACKAGE_NAME:
    sh: "yq4 .PACKAGE_NAME {{.CONDA_LIB_CONFIG_YML}}"
  LOCAL_WORK_DIR:
    sh: "yq4 .LOCAL_WORK_DIR {{.CONDA_LIB_CONFIG_YML}}"
  # ---- read actual output infos values ----
  _CONDA_PRE_BUILD_INFO_PATH:
    sh: "yq4 .conda_build_info.info_path {{.INFOS_CONFIG_YML}}"
  CONDA_PRE_BUILD_INFO_PATH: "{{.BUILD_INFO_ROOT}}/{{._CONDA_PRE_BUILD_INFO_PATH}}"

  _CONDA_POST_BUILD_INFO_PATH:
    sh: "yq4 .conda_build_info.post_path {{.INFOS_CONFIG_YML}}"
  CONDA_POST_BUILD_INFO_PATH: "{{.BUILD_INFO_ROOT}}/{{._CONDA_POST_BUILD_INFO_PATH}}"

  _CONDA_ARTIFACTS_PUBLISH_INFO_PATH:
    sh: "yq4 .conda_build_info.publish_artifacts_path {{.INFOS_CONFIG_YML}}"
  CONDA_ARTIFACTS_PUBLISH_INFO_PATH: "{{.BUILD_INFO_ROOT}}/{{._CONDA_ARTIFACTS_PUBLISH_INFO_PATH}}"

  # ---- venvs meta info [ deps txt files, deps lock files, env yamls ] ----
  ## for how lock files are create see https://github.com/conda-incubator/conda-lock
  ## dir paths
  CONDA_ENVS_INFO_DIR: "./__build_info/conda-envs-info"
  CONDA_ENVS_BUILD_INFO_DIR: "{{.BUILD_INFO_ROOT}}/conda-envs-info"
  ## env deps list files names
  META_DEV_ENVS_DEPS_FILE_NAME: "{{.META_DEV_ENV_NAME}}.deps.txt"
  META_TEST_ENVS_DEPS_FILE_NAME: "{{.META_TEST_ENV_NAME}}.deps.txt"
  META_BUILD_ENVS_DEPS_FILE_NAME: "{{.META_BUILD_ENV_NAME}}.deps.txt"
  ## env deps list files paths
  META_DEV_ENVS_DEPS_FILE_PATH: "{{.CONDA_ENVS_INFO_DIR}}/{{.META_DEV_ENVS_DEPS_FILE_NAME}}"
  META_TEST_ENVS_DEPS_FILE_PATH: "{{.CONDA_ENVS_INFO_DIR}}/{{.META_TEST_ENVS_DEPS_FILE_NAME}}"
  META_BUILD_ENVS_DEPS_FILE_PATH: "{{.CONDA_ENVS_INFO_DIR}}/{{.META_BUILD_ENVS_DEPS_FILE_NAME}}"
  ## env meta yaml files names
  META_DEV_ENVS_META_YAML_FILE_NAME: "{{.META_DEV_ENV_NAME}}.env.yml"
  META_TEST_ENVS_META_YAML_FILE_NAME: "{{.META_TEST_ENV_NAME}}.env.yml"
  META_BUILD_ENVS_META_YAML_FILE_NAME: "{{.META_BUILD_ENV_NAME}}.env.yml"
  ## env meta yaml files paths
  META_DEV_ENVS_META_YAML_FILE_PATH: "{{.CONDA_ENVS_INFO_DIR}}/{{.META_DEV_ENV_NAME}}.env.yml"
  META_TEST_ENVS_META_YAML_FILE_PATH: "{{.CONDA_ENVS_INFO_DIR}}/{{.META_TEST_ENV_NAME}}.env.yml"
  META_BUILD_ENVS_META_YAML_FILE_PATH: "{{.CONDA_ENVS_INFO_DIR}}/{{.META_BUILD_ENV_NAME}}.env.yml"

  # ---- conda-pack [ see https://conda.github.io/conda-pack/ ]
  CONDA_PACK_OUTPUT_DIR: "{{.LOCAL_WORK_DIR}}/conda-pack"

tasks:
  default:
    cmds:
      - echo "{{.GREETING}}"
      - task -l
    silent: true

  clean:build:
    desc: remove conda build output folder {{.LOCAL_CONDA_BUILD_DIR}}
    cmds:
      - rm -rf {{.LOCAL_CONDA_BUILD_DIR}}

  clean:conda-reset:
    desc: Attention! remove all envs. clean package cache
    cmds:
      - task: clean:conda-envs:all
      - task: clean:conda-clean

  clean:conda-envs:all:
    desc: Attention! Remove ALL named user conda envs on machine
    cmds:
      - |
        mamba env list \
        | grep -vE "(^base|^#|^$)" \
        | cut -d" " -f1 | tr "\n" " " \
        | xargs -n 1 -P 5 mamba env remove -n \
        || true
      - rm -rf ~/.conda/envs ${CONDA_ENVS_PATH}

  clean:conda-clean:verbose:
    desc: Attention! remove ALL conda packages in cache [ verbose ]
    cmds:
      - mamba clean --all -y

  clean:conda-clean:
    desc: Attention! remove ALL conda packages in cache [ quiet ]
    cmds:
      - mamba clean --all -y >& /dev/null

  info:
    desc: show project conda info
    vars: *_vars_
    env: *_vars_
    cmds:
      - echo "META_DEV_ENV_NAME={{.META_DEV_ENV_NAME}}"
      - echo "META_DEV_ENVS_DEPS_FILE_PATH={{.META_DEV_ENVS_DEPS_FILE_PATH}}"
      - echo "META_BUILD_ENV_NAME={{.META_BUILD_ENV_NAME}}"
      - echo "META_BUILD_ENVS_DEPS_FILE_PATH={{.META_BUILD_ENVS_DEPS_FILE_PATH}}"
      - echo "META_TEST_ENV_NAME={{.META_TEST_ENV_NAME}}"
      - echo "META_TEST_ENVS_DEPS_FILE_PATH={{.META_TEST_ENVS_DEPS_FILE_PATH}}"
      - echo "CONDA_LIB_CONFIG_YML={{.CONDA_LIB_CONFIG_YML}}"
      - echo "CONDA_ENVS_INFO_DIR={{.CONDA_ENVS_INFO_DIR}}"
      - echo "CONDA_ENVS_BUILD_INFO_DIR={{.CONDA_ENVS_BUILD_INFO_DIR}}"
      - echo "META_DEV_ENVS_META_YAML_FILE_PATH={{.META_DEV_ENVS_META_YAML_FILE_PATH}}"
      - echo "META_TEST_ENVS_META_YAML_FILE_PATH={{.META_TEST_ENVS_META_YAML_FILE_PATH}}"
      - echo "META_BUILD_ENVS_META_YAML_FILE_PATH={{.META_BUILD_ENVS_META_YAML_FILE_PATH}}"
      - echo "CONDA_ARTIFACTS_PUBLISH_INFO_PATH={{.CONDA_ARTIFACTS_PUBLISH_INFO_PATH}}"
      - echo "CONDA_POST_BUILD_INFO_PATH={{.CONDA_POST_BUILD_INFO_PATH}}"
      - echo "CONDA_PRE_BUILD_INFO_PATH={{.CONDA_PRE_BUILD_INFO_PATH}}"
      - echo "LOCAL_WORK_DIR={{.LOCAL_WORK_DIR}}"
      - echo "VENV_EXE={{.VENV_EXE}}"
    silent: yes

  venv:info:
    desc: show venvs name
    cmds:
      - echo "build-env name = {{.META_BUILD_ENV_NAME}}"
      - echo "dev-env   name = {{.META_DEV_ENV_NAME}}"
      - echo "test-env  name = {{.META_TEST_ENV_NAME}}"
    silent: true

  venv:get:fullname:
    # @@act=mark kind=nice-to-have
    desc: shows actual venv name. use `-o interleaved`
    cmds:
      - |
        [[ "{{.REQUESTED_ENV_VAL}}" == "build" ]] \
          && echo "{{.META_BUILD_ENV_NAME}}" || true
      - |
        [[ "{{.REQUESTED_ENV_VAL}}" == "test" ]] \
          && echo "{{.META_TEST_ENV_NAME}}"  || true
      - |
        [[ "{{.REQUESTED_ENV_VAL}}" == "dev" ]] \
          && echo "{{.META_DEV_ENV_NAME}}"   || true
      - |
        [[ "{{.REQUESTED_ENV_VAL}}" == "work" ]] \
          && echo "{{.META_WORK_ENV_NAME}}" || true
      - |
        [[ "{{.REQUESTED_ENV_VAL}}" == "base" ]] \
          && echo "{{.META_BASE_ENV_NAME}}" || true
    silent: yes

  # ---/ dependencies install

  venv:create:build-env:
    desc: create {{.META_BUILD_ENVS_DEPS_FILE_PATH}} deps file for env {{.META_BUILD_ENV_NAME}}
    deps:
      - venv:update:build-env

  venv:create:dev-env:
    desc: create env {{.META_DEV_ENV_NAME}} from file spec {{.META_DEV_ENVS_DEPS_FILE_PATH}}
    deps:
      - venv:update:dev-env

  venv:create:test-env:
    desc: create env {{.META_TEST_ENV_NAME}} from file spec {{.META_TEST_ENVS_DEPS_FILE_PATH}}
    deps:
      - venv:update:test-env

  venv:create:all:
    desc: creates all venvs
    deps:
      - venv:update:all
    cmds:
      - echo "created all venvs"

  # ---/ removals group

  venv:task:remove:one: &ref_venv_task_remove_one
    cmds:
      - mamba env remove --name {{.TARGET_VENV}}
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  venv:task:remove:envs-dir:
    desc: remove envs directory {{.LOCAL_CONDA_ENVS_DIR}}
    cmds:
      - rm -rf {{.LOCAL_CONDA_ENVS_DIR}}

  venv:task:remove:build-env:
    desc: remove env {{.META_BUILD_ENV_NAME}}
    <<: *ref_venv_task_remove_one
    vars: { TARGET_VENV: "{{.META_BUILD_ENV_NAME}}" }

  venv:task:remove:test-env:
    desc: remove env {{.META_TEST_ENV_NAME}}
    <<: *ref_venv_task_remove_one
    vars: { TARGET_VENV: "{{.META_TEST_ENV_NAME}}" }

  venv:task:remove:dev-env:
    desc: remove env {{.META_DEV_ENV_NAME}}
    <<: *ref_venv_task_remove_one
    vars: { TARGET_VENV: "{{.META_DEV_ENV_NAME}}" }

  venv:remove:all:
    desc: removes all venvs
    deps:
      - venv:task:remove:build-env
      - venv:task:remove:test-env
      - venv:task:remove:dev-env
    cmds:
      - task: venv:task:remove:envs-dir
      - echo "removed all venvs and env dir"

  package:build:
    desc: build conda package {{.PACKAGE_NAME}}
    prefix: "{{.TASK}}:{{.PACKAGE_NAME}}"
    env:
      MX_PACKAGE_VERSION:
        sh: "yq4 .version_info.active_version {{.CONDA_PRE_BUILD_INFO_PATH}}"
    deps:
      - venv:update:build-env
    cmds:
      - echo -e "@log.info@ building=package name={{.PACKAGE_NAME}} env={{.META_BUILD_ENV_NAME}}"
      - |
        {{.VENV_EXE}} build run \
          conda mambabuild $(dirname {{.PACKAGE_META_YAML_PATH}}) \
          --output-folder {{.LOCAL_CONDA_BUILD_DIR}} \
          ${MXP_CONDA_BUILD_ARGS}
      - |
        {{.VENV_EXE}} build run {{.MXPACK_EXE}} conda-build post-dump

  package:publish:products:
    desc: Publish Build info
    cmds:
      - |
        {{.VENV_EXE}} build run {{.MXPACK_EXE}} conda-build publish

  package:purge:build:
    desc: remove {{.LOCAL_CONDA_BUILD_DIR}}, purge conda build
    cmds:
      - rm -rf {{.LOCAL_CONDA_BUILD_DIR}}
      - |
        {{.VENV_EXE}} build run conda build purge

  package:install:in-test:
    desc: install package from build tarball
    deps:
      - venv:update:test-env
    env:
      MX_PACKAGE_VERSION:
        sh: "yq4 .version_info.active_version {{.CONDA_PRE_BUILD_INFO_PATH}}"
    cmds:
      - |
        mamba install -y --name {{.META_TEST_ENV_NAME}} -c {{.LOCAL_CONDA_BUILD_DIR}} \
          {{.PACKAGE_NAME}}=${MX_PACKAGE_VERSION}

  package:full-build:
    desc: build conda package {{.PACKAGE_NAME}}, install in env {{.META_TEST_ENV_NAME}}, run tests
    cmds:
      - task: package:build
      - task: package:install:in-test

  package:install:here:
    desc: install package from build tarball
    env:
      MX_PACKAGE_VERSION:
        sh: "yq4 .version_info.active_version {{.CONDA_PRE_BUILD_INFO_PATH}}"
    cmds:
      - |
        mamba install -y -c {{.LOCAL_CONDA_BUILD_DIR}} \
          {{.PACKAGE_NAME}}=${MX_PACKAGE_VERSION}

  package:install:dev-mod:
    desc: install package as link to source
    cmds:
      - python -m pip install -e . --no-deps

  venv:update:dev-env:
    desc: update env {{.META_DEV_ENV_NAME}} from file spec {{.META_DEV_ENVS_DEPS_FILE_PATH}}
    deps:
      - venv:update:from-file:dev

  venv:update:build-env:
    desc: update env {{.META_BUILD_ENV_NAME}} from file spec {{.META_BUILD_ENVS_DEPS_FILE_PATH}}
    deps:
      - venv:update:from-file:build

  venv:update:test-env:
    desc: update env {{.META_TEST_ENV_NAME}} from file spec {{.META_TEST_ENVS_DEPS_FILE_PATH}}
    deps:
      - venv:update:from-file:test

  venv:update:all:
    desc: update all venvs
    deps:
      - venv:update:from-file:dev
      - venv:update:from-file:build
      - venv:update:from-file:test

  venv:update:work-env:here:
    desc: install run + test deps file {{.META_TEST_ENVS_DEPS_FILE_PATH}} in current active env {{.CONDA_DEFAULT_ENV}}
    vars:
      DEPS_FILE: "{{.META_TEST_ENVS_DEPS_FILE_PATH}}"
      TARGET_VENV: "{{.CONDA_DEFAULT_ENV}}"
    cmds:
      - echo "{{.CONDA_DEFAULT_ENV}}"
      - task: deps:install:from-file
        vars:
          DEPS_FILE: "{{.DEPS_FILE}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  # ---/ venvs info [ experimental ]

  package:get:list-for-file: &ref_package_get_list_for_file
    args: # @info: not standard
      YQ_PATH: path in meta.yaml
    cmds:
      - yq4 '... comments=""' {{.PACKAGE_META_YAML_PATH}} | yq4 ".{{.YQ_PATH}}" | sed 's/null//' | sed 's/^- //g' | sed 's/[\"]//g'
    silent: yes

  deps:create:file:dev:
    desc: create {{.META_DEV_ENVS_DEPS_FILE_PATH}} deps file for env {{.META_DEV_ENV_NAME}}; IN_ARG=TARGET_DEPS_FILE_PATH
    args:
      TARGET_DEPS_FILE_PATH: target deps file full path
    vars:
      META_ENV_NAME: "{{.META_DEV_ENV_NAME}}"
    cmds:
      - mkdir -p $(dirname {{.TARGET_DEPS_FILE_PATH}} )
      - task conda:package:get:list-for-file YQ_PATH=requirements.mx_dev_only_deps -o interleaved > {{.TARGET_DEPS_FILE_PATH}}
      - task conda:package:get:list-for-file YQ_PATH=requirements.mx_test_deps -o interleaved >> {{.TARGET_DEPS_FILE_PATH}}
      - task conda:package:get:list-for-file YQ_PATH=requirements.mx_build_deps -o interleaved >> {{.TARGET_DEPS_FILE_PATH}}
      - task conda:package:get:list-for-file YQ_PATH=requirements.run -o interleaved >> {{.TARGET_DEPS_FILE_PATH}}
      - echo "{{.META_ENV_NAME}} deps file - {{.TARGET_DEPS_FILE_PATH}}"
    silent: yes

  deps:create:file:build:
    desc: create {{.META_BUILD_ENVS_DEPS_FILE_PATH}} deps file for env {{.META_BUILD_ENV_NAME}}; IN_ARG=TARGET_DEPS_FILE_PATH
    args:
      TARGET_DEPS_FILE_PATH: target deps file full path
    vars:
      META_ENV_NAME: "{{.META_BUILD_ENV_NAME}}"
    cmds:
      - mkdir -p $(dirname {{.TARGET_DEPS_FILE_PATH}})
      - task conda:package:get:list-for-file YQ_PATH=requirements.mx_build_deps -o interleaved > {{.TARGET_DEPS_FILE_PATH}}
      - echo "{{.META_ENV_NAME}} deps file - {{.TARGET_DEPS_FILE_PATH}}"
    silent: yes

  deps:create:file:test:
    desc: create {{.META_TEST_ENVS_DEPS_FILE_PATH}} deps file for env {{.META_TEST_ENV_NAME}}
    args:
      TARGET_DEPS_FILE_PATH: target deps file full path
    vars:
      META_ENV_NAME: "{{.META_TEST_ENV_NAME}}"
    cmds:
      - mkdir -p $(dirname {{.TARGET_DEPS_FILE_PATH}} )
      - task conda:package:get:list-for-file YQ_PATH=requirements.mx_test_deps -o interleaved > {{.TARGET_DEPS_FILE_PATH}}
      - task conda:package:get:list-for-file YQ_PATH=requirements.run -o interleaved >> {{.TARGET_DEPS_FILE_PATH}}
      - echo "{{.META_ENV_NAME}} deps file - {{.TARGET_DEPS_FILE_PATH}}"
    silent: yes

  deps:create:file:all:
    desc: create deps files for all envs [ test, build, dev ]
    deps:
      - task: deps:create:file:test
        vars:
          TARGET_DEPS_FILE_PATH: "{{.META_TEST_ENVS_DEPS_FILE_PATH}}"
      - task: deps:create:file:dev
        vars:
          TARGET_DEPS_FILE_PATH: "{{.META_DEV_ENVS_DEPS_FILE_PATH}}"
      - task: deps:create:file:build
        vars:
          TARGET_DEPS_FILE_PATH: "{{.META_BUILD_ENVS_DEPS_FILE_PATH}}"

  deps:show:any: &deps_show_any
    args:
      DEPS_FILE: a .txt file of deps spec
    cmds:
      - |
        echo "
        @info: deps in file -
        
        $(cat {{.DEPS_FILE}})

        @info: deps file location -
        
        {{.DEPS_FILE}}
        "
    silent: true

  deps:show:dev:
    desc: show dev env deps from file {{.META_DEV_ENVS_DEPS_FILE_PATH}}
    <<: *deps_show_any
    vars: { DEPS_FILE: "{{.META_DEV_ENVS_DEPS_FILE_PATH}}" }

  deps:show:test:
    desc: show test env deps from file {{.META_TEST_ENVS_DEPS_FILE_PATH}}
    <<: *deps_show_any
    vars: { DEPS_FILE: "{{.META_TEST_ENVS_DEPS_FILE_PATH}}" }

  deps:show:build:
    desc: show build env deps from file {{.META_BUILD_ENVS_DEPS_FILE_PATH}}
    <<: *deps_show_any
    vars: { DEPS_FILE: "{{.META_BUILD_ENVS_DEPS_FILE_PATH}}" }

  deps:install:from-file:
    desc: install deps spec from file DEPS_FILE in env TARGET_VENV
    args:
      DEPS_FILE: a .txt file of deps spec
      TARGET_VENV: install to
    cmds:
      - mamba install -y --name {{.TARGET_VENV}} --file {{.DEPS_FILE}}
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  deps:install:from-file:in-dev:
    desc: install deps from file {{.META_DEV_ENVS_DEPS_FILE_PATH}} in env {{.META_TESMETA_DEV_ENV_NAME}}
    vars:
      DEPS_FILE: "{{.META_DEV_ENVS_DEPS_FILE_PATH}}"
      TARGET_VENV: "{{.META_DEV_ENV_NAME}}"
    cmds:
      - task: deps:install:from-file
        vars:
          DEPS_FILE: "{{.DEPS_FILE}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  deps:install:from-file:in-test:
    desc: install deps from file {{.META_TEST_ENVS_DEPS_FILE_PATH}} in env {{.META_TEST_ENV_NAME}}
    vars:
      DEPS_FILE: "{{.META_TEST_ENVS_DEPS_FILE_PATH}}"
      TARGET_VENV: "{{.META_TEST_ENV_NAME}}"
    cmds:
      - task: deps:install:from-file
        vars:
          DEPS_FILE: "{{.DEPS_FILE}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  deps:install:from-file:in-build:
    desc: install deps from file {{.META_BUILD_ENVS_DEPS_FILE_PATH}} in env {{.META_BUILD_ENV_NAME}}
    vars:
      DEPS_FILE: "{{.META_BUILD_ENVS_DEPS_FILE_PATH}}"
      TARGET_VENV: "{{.META_BUILD_ENV_NAME}}"
    cmds:
      - task: deps:install:from-file
        vars:
          DEPS_FILE: "{{.DEPS_FILE}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  venv:update:from-file:any: &venv_update_from_file_any
    cmds:
      - task: deps:create:file:{{.TASK_CREATE_DEPS_SUFFIX}}
        vars:
          TARGET_DEPS_FILE_PATH: "{{.BUILD_INFO_DEPS_FILE}}"
      - task: venv:create-env
        vars:
          META_DEPS_FILE: "{{.META_DEPS_FILE}}"
          TASK_CREATE_DEPS_SUFFIX: "{{.TASK_CREATE_DEPS_SUFFIX}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
      - task: venv:update-env
        vars:
          META_DEPS_FILE: "{{.META_DEPS_FILE}}"
          BUILD_INFO_DEPS_FILE: "{{.BUILD_INFO_DEPS_FILE}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
      - task: package:install:pip-deps
        vars:
          TARGET_VENV: "{{.TARGET_VENV}}"
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  venv:update:from-file:build:
    <<: *venv_update_from_file_any
    vars:
      META_DEPS_FILE: "{{.META_BUILD_ENVS_DEPS_FILE_PATH}}"
      BUILD_INFO_DEPS_FILE: "{{.CONDA_ENVS_BUILD_INFO_DIR}}/{{.META_BUILD_ENVS_DEPS_FILE_NAME}}"
      TARGET_VENV: "{{.META_BUILD_ENV_NAME}}"
      TASK_CREATE_DEPS_SUFFIX: "build"

  venv:update:from-file:test:
    <<: *venv_update_from_file_any
    vars:
      META_DEPS_FILE: "{{.META_TEST_ENVS_DEPS_FILE_PATH}}"
      BUILD_INFO_DEPS_FILE: "{{.CONDA_ENVS_BUILD_INFO_DIR}}/{{.META_TEST_ENVS_DEPS_FILE_NAME}}"
      TARGET_VENV: "{{.META_TEST_ENV_NAME}}"
      TASK_CREATE_DEPS_SUFFIX: "test"

  venv:update:from-file:dev:
    <<: *venv_update_from_file_any
    vars:
      META_DEPS_FILE: "{{.META_DEV_ENVS_DEPS_FILE_PATH}}"
      BUILD_INFO_DEPS_FILE: "{{.CONDA_ENVS_BUILD_INFO_DIR}}/{{.META_DEV_ENVS_DEPS_FILE_NAME}}"
      TARGET_VENV: "{{.META_DEV_ENV_NAME}}"
      TASK_CREATE_DEPS_SUFFIX: "dev"

  venv:create-env:
    args:
      META_DEPS_FILE: meta deps file full path
      TARGET_VENV: target venv
      TASK_CREATE_DEPS_SUFFIX: suffix of conda:deps:create:file task, e.g. build
    cmds:
      - echo "META_DEPS_FILE={{.META_DEPS_FILE}}"
      - echo "TASK_CREATE_DEPS_SUFFIX={{.TASK_CREATE_DEPS_SUFFIX}}"
      - echo "TARGET_VENV={{.TARGET_VENV}}"
      - task conda:deps:create:file:{{.TASK_CREATE_DEPS_SUFFIX}} TARGET_DEPS_FILE_PATH="{{.META_DEPS_FILE}}"
      - mamba create -y --name "{{.TARGET_VENV}}" --file "{{.META_DEPS_FILE}}"
    status:
      - conda env list | grep {{.TARGET_VENV}} 

  venv:update-env:
    args:
      META_DEPS_FILE: meta deps file full path
      BUILD_INFO_DEPS_FILE: build info deps target file full path
      TARGET_VENV: target venv
    cmds:
      - mamba install -y --name "{{.TARGET_VENV}}" --file "{{.META_DEPS_FILE}}"
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  venv:conda-pack:pack:any:
    desc: |
      pack a given conda env using conda-pack

      MANDATORY_ARGS:-
        RUN_VENV= env with conda-pack installed to run from
        TARGET_VENV= target venv name to conda-pack [ name, not prefix ]
        TARGET_ENV_PACK_FILE_PATH= target deps file full path [ .tar.gz file ]
        CONDA_PACK_EXTRA_ARGS= additional args to conda-pack

      OPTIONAL_ARGS:-
        CONDA_PACK_EXTRA_ARGS: additional args passed to conda-pack
    args:
      RUN_VENV: env to run from that has conda-pack installed
      TARGET_VENV: target venv name to conda-pack
      TARGET_ENV_PACK_FILE_PATH: target deps file full path
      CONDA_PACK_EXTRA_ARGS: additional args to conda-pack
    cmds:
      - mkdir -p $(dirname {{.TARGET_ENV_PACK_FILE_PATH}} )
      - |
        mamba run -n {{.RUN_VENV}} \
          conda-pack --name {{.TARGET_VENV}} --output {{.TARGET_ENV_PACK_FILE_PATH}} --force \
          {{.CONDA_PACK_EXTRA_ARGS}}
      - echo "packed env {{.TARGET_VENV}} path is - {{.TARGET_ENV_PACK_FILE_PATH}}"
    prefix: "{{.TASK}}:{{.TARGET_VENV}}"

  venv:conda-pack:pack:build:
    desc: |
      use conda-pack to pack env {{.META_BUILD_ENV_NAME}}

      Info:-
        Output dir is {{.CONDA_PACK_OUTPUT_DIR}}

      OPTIONAL_ARGS:-
        CONDA_PACK_EXTRA_ARGS= additional args passed to conda-pack
    args:
      CONDA_PACK_EXTRA_ARGS: additional args to conda-pack
    deps:
      - task: venv:create:build-env
    vars:
      RUN_VENV: "{{.META_BUILD_ENV_NAME}}"
      TARGET_VENV: "{{.META_BUILD_ENV_NAME}}"
      TARGET_ENV_PACK_FILE_PATH: "{{.CONDA_PACK_OUTPUT_DIR}}/{{.META_BUILD_ENV_NAME}}.tar.gz"
    cmds:
      - task: venv:conda-pack:pack:any
        vars:
          RUN_VENV: "{{.RUN_VENV}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
          TARGET_ENV_PACK_FILE_PATH: "{{.TARGET_ENV_PACK_FILE_PATH}}"
          CONDA_PACK_EXTRA_ARGS: "{{.CONDA_PACK_EXTRA_ARGS}}"

  venv:conda-pack:pack:test:
    desc: |
      use conda-pack to pack env {{.META_TEST_ENV_NAME}}

      Info:-
        Output dir is {{.CONDA_PACK_OUTPUT_DIR}}

      OPTIONAL_ARGS:-
        CONDA_PACK_EXTRA_ARGS= additional args passed to conda-pack
    deps:
      - task: venv:create:build-env
      - task: venv:create:test-env
    args:
      CONDA_PACK_EXTRA_ARGS: additional args to conda-pack
    vars:
      RUN_VENV: "{{.META_BUILD_ENV_NAME}}"
      TARGET_VENV: "{{.META_TEST_ENV_NAME}}"
      TARGET_ENV_PACK_FILE_PATH: "{{.CONDA_PACK_OUTPUT_DIR}}/{{.META_TEST_ENV_NAME}}.tar.gz"
    cmds:
      - task: venv:conda-pack:pack:any
        vars:
          RUN_VENV: "{{.RUN_VENV}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
          TARGET_ENV_PACK_FILE_PATH: "{{.TARGET_ENV_PACK_FILE_PATH}}"
          CONDA_PACK_EXTRA_ARGS: "{{.CONDA_PACK_EXTRA_ARGS}}"

  venv:conda-pack:pack:dev:
    desc: |
      use conda-pack to pack env {{.META_DEV_ENV_NAME}}

      Info:-
        Output dir is {{.CONDA_PACK_OUTPUT_DIR}}

      OPTIONAL_ARGS:-
        CONDA_PACK_EXTRA_ARGS= additional args passed to conda-pack
    deps:
      - task: venv:create:build-env
      - task: venv:create:dev-env
    args:
      CONDA_PACK_EXTRA_ARGS: additional args to conda-pack
    vars:
      RUN_VENV: "{{.META_BUILD_ENV_NAME}}"
      TARGET_VENV: "{{.META_DEV_ENV_NAME}}"
      TARGET_ENV_PACK_FILE_PATH: "{{.CONDA_PACK_OUTPUT_DIR}}/{{.META_DEV_ENV_NAME}}.tar.gz"
    cmds:
      - task: venv:conda-pack:pack:any
        vars:
          RUN_VENV: "{{.RUN_VENV}}"
          TARGET_VENV: "{{.TARGET_VENV}}"
          TARGET_ENV_PACK_FILE_PATH: "{{.TARGET_ENV_PACK_FILE_PATH}}"
          CONDA_PACK_EXTRA_ARGS: "{{.CONDA_PACK_EXTRA_ARGS}}"

  venv:conda-pack:unpack:
    desc: |
      unpack env packed with conda-pack

      MANDATORY_ARGS:-
        TARGET_VENV_DIR= env path to unpack to, e.g. /tmp/my-env
        ENV_PACKED_TAR_GZ_PATH= path to env packed tar.gz file, e.g. mxpcli-mx-test-py3.7.tar.gz
    args:
      TARGET_VENV_DIR: env path to unpack to, e.g. /tmp/my-env
      ENV_PACKED_TAR_GZ_PATH: path to env packed tar.gz file, e.g. mxpcli-mx-test-py3.7.tar.gz
    cmds:
      - echo "create target env dir {{.TARGET_VENV_DIR}}"
      - mkdir -p {{.TARGET_VENV_DIR}}
      - echo "untar into target dir {{.ENV_PACKED_TAR_GZ_PATH}}"
      - tar -xzf {{.ENV_PACKED_TAR_GZ_PATH}} -C {{.TARGET_VENV_DIR}}
      - echo "run 'source {{.TARGET_VENV_DIR}}/bin/activate' to activate unpacked env"


  build:show:local-build-contents:
    desc: show the local build content from local build channel
    vars:
      LOCAL_CONDA_BUILD_DIR:
        sh: "yq4 .LOCAL_CONDA_BUILD_DIR {{.CONDA_LIB_CONFIG_YML}}"
    cmds:
      - mamba search -c {{.LOCAL_CONDA_BUILD_DIR}} --override-channels --info
    silent: true
    prefix: "."

  package:install:pip-deps:
    desc: install pip packages required for test
    args:
      TARGET_VENV: target venv
    cmds:
      - mamba run -n {{.TARGET_VENV}} pip install "dash[diskcache]"
