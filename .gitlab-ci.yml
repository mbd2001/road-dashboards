variables:
  PACKAGE_FOLDER: "road_dashboards"

.before_script_common: &before_script_common
  - |
    if ! command -v pixi > /dev/null 2>&1; then
      echo "Installing Pixi." && curl -fsSL https://pixi.sh/install.sh | bash
      export PATH=$HOME/.pixi/bin:$PATH
    else
      echo "Pixi is already installed."
    fi
  - pixi info
  - hatch --version
  - |
    if [ "$CI_COMMIT_BRANCH" == "master" ]; then
      if [ "$CI_COMMIT_BEFORE_SHA" == "0000000000000000000000000000000000000000" ]; then
        VERSION_CHANGES=$(git --no-pager diff --name-only $CI_COMMIT_SHA | grep $PACKAGE_FOLDER/__about__.py || true)
      else
        VERSION_CHANGES=$(git --no-pager diff --name-only $CI_COMMIT_BEFORE_SHA...$CI_COMMIT_SHA | grep $PACKAGE_FOLDER/__about__.py || true)
      fi
      if [ ! -z "$VERSION_CHANGES" ]; then
        echo "Version changes detected. Skipping version bump. Version is $(hatch version)."
      else
        hatch version patch && echo "Bumped $CI_PROJECT_NAME to version $(hatch version)"
      fi
    fi
  - echo "Package version is $(hatch version)"
  - source .auth/.setup_auth.sh

default:
  image: artifactory.sddc.mobileye.com/me-conda-docker-local/mx-conda-py310
  tags:
    - road-algo-large
  interruptible: true
  before_script: *before_script_common

stages:
  - &pre-commit-hooks "üîç Pre-Commit Hooks"
  - &test "üß™ Test"
  - &deploy "üöÄ Deploy"
  - &reload "üîÑ Reload Containers"

workflow:
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^Version bump to [0-9]+\.[0-9]+\.[0-9]+$/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always

.only-master-pushes:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"

pre-commit-hooks-check:
  stage: *pre-commit-hooks
  script:
    - pixi install -e lint --locked
    - pixi run pre-commit-run --color always --show-diff-on-failure
  rules:
    # Avoiding pycheck when the pipeline is triggered from another repo's pipeline
    - if: $CI_PIPELINE_SOURCE  == "pipeline"
      when: never
    # After a push to master (Finished MR), skip python check stage.
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

test-pixi-lock:
  tags:
    - road-algo-medium
  stage: *test
  script:
    - pixi install --locked

deploy:bump_version:
  tags:
    - road-algo-small
  stage: *deploy
  # faceless user is configured in the group masked CI variables
  script:
    - git config --global user.name $FACELESS_ONPREM_USER
    - git config --global user.email $FACELESS_ONPREM_USER@mobileye.com
    - git checkout $CI_COMMIT_BRANCH
    - git branch -vv
    - git add $PACKAGE_FOLDER/__about__.py
    - git commit -m"Version bump to $(hatch version)" || echo No version changes to commit.
    - TAG=$CI_PROJECT_NAME-$(hatch version)
    - git tag $TAG
    - git remote set-url origin https://oauth2:${GITLAB_TOKEN}@${CI_REPOSITORY_URL#*@}
    - git push --atomic origin $CI_COMMIT_BRANCH $TAG -o ci.skip
  extends: .only-master-pushes

deploy:docs:
  tags:
    - pages
  stage: *deploy
  script:
    - pixi run --locked mkdocs-build
  artifacts:
    paths:
      - public
  extends: .only-master-pushes

.deploy-containers:
  image: docker:cli
  tags:
    - road-algo-medium
  variables:
    DOCKER_BUILDKIT: "0"
  script:
    - task docker:build_and_push

deploy:docker:data-exploration:
  stage: *deploy
  variables:
    IMAGE_NAME: road-data-exploration
    DOCKERFILE_NAME: ./docker/Dockerfile.data-exploration
  extends: .deploy-containers
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - road_dashboards/road_dump_dashboard/**/*
        - docker/Dockerfile.data-exploration

deploy:docker:eval-dashboard:
  stage: *deploy
  variables:
    IMAGE_NAME: road-eval-dashboard
    DOCKERFILE_NAME: ./docker/Dockerfile.eval-dashboard
  extends: .deploy-containers
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - road_dashboards/road_eval_dashboard/**/*
        - docker/Dockerfile.eval-dashboard

deploy:docker:workflows-dashboard:
  stage: *deploy
  image: docker:25.0
  services:
    - name: docker:25.0-dind
  variables:
    DOCKER_BUILDKIT: "0"
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
    IMAGE_NAME: workflows-dashboard
    DOCKERFILE_NAME: ./docker/Dockerfile.workflows-dashboard
  extends: .deploy-containers
  before_script:
    - apk add --no-cache curl bash
    - *before_script_common
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - road_dashboards/workflows_dashboard/**/*
        - docker/Dockerfile.workflows-dashboard

post:reload-data-exploration:
  stage: *reload
  tags:
    - road-algo-small
  script:
    - echo "Reloading the Data Exploration container."
    - export COMMAND_ID=$(aws ssm send-command --document-name "Pull_Latest_Image_Restart_Docker_Container" --document-version "4" --targets '[{"Key":"InstanceIds","Values":["i-0c2b0271e14bd0c8d"]}]' --parameters '{"imageName":["771416621287.dkr.ecr.us-east-1.amazonaws.com/algo.road"],"imageTag":["road-data-exploration_latest"],"containerName":["data_exploration"],"dockerRunArgs":["-p 6008:6008 --memory=3g --memory-swap=3g --restart unless-stopped"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region us-east-1 | yq4 .Command.CommandId)
    - aws ssm wait command-executed --command-id ${COMMAND_ID} --instance-id i-0c2b0271e14bd0c8d
    - echo "Data Exploration container reloaded."
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - road_dashboards/road_dump_dashboard/**/*
        - docker/Dockerfile.data-exploration
  needs:
    - deploy:docker:data-exploration

post:reload-eval-dashboard:
  stage: *reload
  tags:
    - road-algo-small
  script:
    - echo "Reloading the Dynamic Stats container."
    - export COMMAND_ID=$(aws ssm send-command --document-name "Pull_Latest_Image_Restart_Docker_Container" --document-version "4" --targets '[{"Key":"InstanceIds","Values":["i-0c2b0271e14bd0c8d"]}]' --parameters '{"imageName":["771416621287.dkr.ecr.us-east-1.amazonaws.com/algo.road"],"imageTag":["road-eval-dashboard_latest"],"containerName":["dynamic_stat"],"dockerRunArgs":["-p 80:6007 --memory=3g --memory-swap=3g --restart unless-stopped"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region us-east-1 | yq4 .Command.CommandId)
    - aws ssm wait command-executed --command-id ${COMMAND_ID} --instance-id i-0c2b0271e14bd0c8d
    - echo "Dynamic Stats container reloaded."
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - road_dashboards/road_eval_dashboard/**/*
        - docker/Dockerfile.eval-dashboard
  needs:
    - deploy:docker:eval-dashboard

post:reload-workflows-dashboard:
  stage: *reload
  tags:
    - road-algo-small
  script:
    - echo "Reloading the Workflows container."
    - export COMMAND_ID=$(aws ssm send-command --document-name "Pull_Latest_Image_Restart_Docker_Container" --document-version "4" --targets '[{"Key":"InstanceIds","Values":["i-0c2b0271e14bd0c8d"]}]' --parameters '{"imageName":["771416621287.dkr.ecr.us-east-1.amazonaws.com/algo.road"],"imageTag":["workflows-dashboard_latest"],"containerName":["weekly_stats"],"dockerRunArgs":["-p 6009:6009 --memory=2g --memory-swap=2g --restart unless-stopped"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region us-east-1 | yq4 .Command.CommandId)
    - aws ssm wait command-executed --command-id ${COMMAND_ID} --instance-id i-0c2b0271e14bd0c8d
    - echo "Workflows container reloaded."
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - road_dashboards/workflows_dashboard/**/*
        - docker/Dockerfile.workflows-dashboard
  needs:
    - deploy:docker:workflows-dashboard
