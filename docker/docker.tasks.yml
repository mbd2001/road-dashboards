# https://taskfile.dev
version: "3"
output: prefixed

vars:
  BUILD_TIME:
    sh: date '+%Y-%m-%d-%H%M%S'
  GREETING: Hello, This task will build, push and run the dashboard container!
  registry_num: "771416621287"
  registry_name: "algo.road"
  aws_repo: "{{.registry_num}}.dkr.ecr.us-east-1.amazonaws.com/{{.registry_name}}"
  image_name: "{{.IMAGE_NAME}}"
  dockerfile_name: "{{.DOCKERFILE_NAME}}"
  docker_params: "-u `id -u`:`id -g` -e USER=$USER -v /mobileye/shared:/mobileye/shared"
  docker_tag: "{{.image_name}}_{{.BUILD_TIME}}"
  full_ecr_name: "{{.aws_repo}}:{{.docker_tag}}"
  full_ecr_name_latest: "{{.aws_repo}}:{{.image_name}}_latest"
  ARTIFACTORY: artifactory.sddc.mobileye.com

tasks:
  default:
    cmds:
      - echo "{{.GREETING}}"
      - task -l
    silent: true

  pre_build:
    desc: clones all the deps from gitlab because docker does not have permissions
    cmds:
      - echo {{.dockerfile_name}}

  pull_repo:
    desc: pulls a repo if does not exist
    vars:
      branch: master
    cmds:
      - git clone --branch {{.branch}} {{.repo_path}} {{.clone_dst}}
    status:
      - test -d {{.clone_dst}}

  post_build_clean:
    desc: deletes all temp files
    cmds:
      - rm -rf deps

  build:
    desc: builds the docker to {{.image_name}}
    deps:
      - task: pull_father_docker
      - task: pre_build
    cmds:
      - docker build --rm -t {{.image_name}} . -f {{.dockerfile_name}} --build-arg BUILD_TIME={{.BUILD_TIME}}
      - task: post_build_clean

  pull_father_docker:
    desc: pulls the ecr docker that is the father of the target docker
    cmds:
      - task: login_ecr
      - task: login-artifactory
      - echo `grep "^FROM " {{.dockerfile_name}} | sed -e "s/FROM //g"`
      - |
        docker_name=`grep "^FROM " {{.dockerfile_name}} | sed -e "s/FROM //g"` && \
        echo "Got docker name: "$docker_name
        docker pull ${docker_name}

  list_ecr_tags:
    desc: lists all images in the algo.road repository
    cmds:
      - task: login_ecr
      - aws ecr list-images --repository-name {{.registry_name}} | grep imageTag

  build_and_push:
    desc: builds the docker to {{.image_name}}
    cmds:
      - task: build
      - task: push

  run:
    desc: Runs the docker "image_name" - {{.image_name}}
    cmds:
      - docker run -it --rm {{.docker_params}} {{.image_name}} /bin/bash

  push:
    desc: "tags the docker with current date and time and pushes to ecr"
    cmds:
      - docker tag {{.image_name}} {{.full_ecr_name_latest}}
      - docker push {{.full_ecr_name_latest}}

  #######
  # ECR #
  #######
  login_ecr:
    deps: [create-aws-road-profile-if-needed]
    cmds:
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin {{.registry_num}}.dkr.ecr.us-east-1.amazonaws.com

  create-aws-road-profile-if-needed:
    status:
      - test -f ~/.aws/credentials
    cmds:
      - |-
        if [[ "${CI}" != "" ]]; then
          mkdir ~/.aws
          cat <<EOF > ~/.aws/credentials
        [default]
        aws_access_key_id = $AWS_ACCESS_KEY_ID
        aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
        aws_session_token = $AWS_SESSION_TOKEN

        [profile sso-mobileye-di/AlgoRoad]
        aws_access_key_id = $AWS_ACCESS_KEY_ID
        aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
        aws_session_token = $AWS_SESSION_TOKEN
        EOF
        else
          echo **WARNING** Trying to create ~/.aws/credentials outside of CI container
        fi
    silent: true

  login-artifactory:
    desc: login to artifactory.
    cmds:
      - |-
        if [ "${CI}" != "" ]; then
          docker login {{.ARTIFACTORY}} -u $FACELESS_ONPREM_USER -p $FACELESS_PASS
        else
          docker login {{.ARTIFACTORY}}
        fi
