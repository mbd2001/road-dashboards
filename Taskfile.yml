version: '3'

vars:
  PYVERSION: 3.10
  PACKAGE_NAME: road-eval-dashboard
  TEST_ENV_NAME: "{{.PACKAGE_NAME}}-env"
  CONDA_RELEASE_CHANNEL: me-conda-dev-local
  PROJECT_VERSION:
      sh: hatch version
  HATCH_BUILD_OUTPUT_FOLDER: ./__localbuild__/pypi
  CONDA_BUILD_OUTPUT_FOLDER: ./__localbuild__/conda

env:
  DIMAGE: artifactory.sddc.mobileye.com/me-conda-docker-local/mx-conda-py310
  PROJECT_VERSION: "{{.PROJECT_VERSION}}"

tasks:
  _show_variables:
    cmds: [env]

  pypi:build:
    desc: "Build the package"
    cmds:
      - hatch build --clean $HATCH_BUILD_OUTPUT_FOLDER

  conda:build:
    desc: "build conda package with boa"
    cmds:
      - boa build boa.recipe/ --output-folder {{.CONDA_BUILD_OUTPUT_FOLDER}} --no-test

  conda:create:dev:
    desc: "create full testing environment"
    cmds:
      - python ./boa.recipe/create_env_yaml_from_recipe.py --env_type test --proj_name {{.PACKAGE_NAME}}
      - mamba env create -n {{.TEST_ENV_NAME}} -f /tmp/{{.PACKAGE_NAME}}.test.yml

  conda:install-local-build:
    desc: "Install the built conda package in the test env. Should be called after build:conda."
    cmds:
      - mamba install -y -n {{.TEST_ENV_NAME}} -c ./__localbuild__/conda --override-channels {{.PACKAGE_NAME}}

  conda:test:
    desc: "Run tests with the built conda test env"
    cmds:
      - mamba run -n {{.TEST_ENV_NAME}} pytest -v -s tests/units

  py:check:
    desc: "Run static code analysis with format check."
    cmds:
      - hatch run lint:check

  py:fix:
    desc: "Format code and try to fix code issues."
    cmds:
      - hatch run lint:fix

  mkdocs:serve:
    desc: "Serve the mkdocs documentation"
    cmds:
      - hatch run docs:serve

  mkdocs:build:
    desc: "Build the mkdocs documentation"
    cmds:
      - hatch run docs:build

  denv:dev:
    desc: "Run the docker environment"
    cmds:
      - |
        abs_path_to_repo_root=$(realpath $(git rev-parse --show-toplevel))
        abs_path_to_subpath_dir=$(realpath .)
        rel_path_to_subpath_dir=$(realpath --relative-to="${abs_path_to_repo_root}" "${abs_path_to_subpath_dir}")
        rel_path_to_repo_root=$(realpath --relative-to="${abs_path_to_subpath_dir}" "${abs_path_to_repo_root}")

        REPO_DIR_HOST=${abs_path_to_repo_root}
        WORKDIR_REL_PATH=${rel_path_to_subpath_dir}
        WORKDIR_HOST=$(realpath ${REPO_DIR_HOST}/${WORKDIR_REL_PATH})
        echo -e "[mx-tools:denv] @@SCRIPT_DIR=${SCRIPT_DIR} REPO_DIR_HOST=${REPO_DIR_HOST}"
        echo -e "[mx-tools:denv] @@WORKDIR_REL_PATH=${WORKDIR_REL_PATH} WORKDIR_HOST=${WORKDIR_HOST}"

        REPO_NAME=$(basename $(readlink -f $REPO_DIR_HOST))
        REPO_DIR_GUEST=/repos/$(basename ${REPO_DIR_HOST})
        WORKDIR_GUEST=${REPO_DIR_GUEST}/${WORKDIR_REL_PATH}
        echo -e "[mx-tools:denv] REPO_NAME=${REPO_NAME} REPO_DIR_GUEST=${REPO_DIR_GUEST} WORKDIR_GUEST=${WORKDIR_GUEST}"
        docker run --rm -it --privileged -p 3030:8000 --workdir ${REPO_DIR_GUEST} -v ${REPO_DIR_HOST}:${REPO_DIR_GUEST} -v ${HOME}/.de:/home/me.docker/.de -v /dev/fuse:/dev/fuse -v ${HOME}/tmp/.aws/:/home/me.docker/.aws/ ${DIMAGE} 
