# https://taskfile.dev

version: "3"

tasks:
  info:
    desc: ci general info
    cmds:
      - echo 'DENV_EXE={{.DENV_EXE}}'
      - echo 'VENV_EXE={{.VENV_EXE}}'
      - echo 'MXPACK_EXE={{.MXPACK_EXE}}'

  resolve-deps:
    desc: resolve dependencies
    cmds:
      - task: fetch:deps:git

  fetch:deps:git:
    desc: Fetch Tags and connected repos
    dir: "{{.WDIR}}"
    internal: true
    cmds:
      - git fetch --tags

  conda:info: "{{.DENV_EXE}} task conda:info"

  ci-flow:
    &_ref_ci_flow
    desc: Full CiCd Flow
    env:
      DENV_OFF: ""
    cmds:
      - task ci:conda:info
      - task ci:init-clean-flow
      - task ci:build-flow
      - task ci:prepare:test-flow
      - task ci:test-flow

  ci-flow:local:
    <<: *_ref_ci_flow
    desc: no denv deps
    env:
      DENV_OFF: "1"

  init-infos:
    desc: Initialize CI
    cmds:
      - task ci:bump-version
      - task ci:pre-build:write
      - task ci:copy-pkg-resources
    silent: true

  init-clean-flow:
    &_init_clean_flow
    desc: |
      initialize ci-flow, create build info, pkg resources etc.
    cmds:
      - task ci:cleanup:soft
      - "{{.DENV_EXE}} task conda:venv:update:build-env"
      - task ci:init-infos
      - task prepare:build

  init-clean-flow:local:
    desc: Initialize CI related meta-data
    env:
      DENV_OFF: 1
    cmds:
      - task ci:init-clean-flow

  build-flow:
    desc: Full package build flow [ pre, build, post ]
    cmds:
      - "{{.DENV_EXE}} task pre:build"
      - "{{.DENV_EXE}} task conda:package:build"
      - "{{.DENV_EXE}} task ci:pypi:build"
      - "{{.DENV_EXE}} task post:build"
  
  pypi:build:
    cmds:
      - "{{.DENV_EXE}} task pypi:build"
    status:
      - "[ -z {{.PIP_BASED_RELEASE}} ]"

  build-flow:local:
    desc: local build-flow
    cmds: ["DENV_OFF=1 task ci:build-flow"]

  prepare:test-flow:
    desc: CI Package Install
    cmds:
      - "{{.DENV_EXE}} task conda:package:install:in-test"

  test-flow:
    desc: CI Package Test Flow
    cmds:
      - "{{.DENV_EXE}} {{.VENV_EXE}} test run task test"

  publish:conda:
    cmds:
      - "{{.DENV_EXE}} task conda:package:publish:products"
    status:
      - "[ -z {{.JOB_NAME}} ] || [ -z {{.JENKINS_URL}} ]"

  publish:pypi:
    cmds:
      - "{{.DENV_EXE}} task pypi:package:publish"
    status:
      - |
        [ -z {{.JOB_NAME}} ] || \
        [ -z {{.JENKINS_URL}} ] || \
        [ -z {{.PIP_BASED_RELEASE}} ] || \
        [ $(jq '.branch_type | index( "release" )' ./__build_info/mxpack/git_info.json) = "null" ]

  publish-docs:
    desc: _
    cmds:
      - task mkdocs:publish
    status:
      - |
        [ -z {{.JOB_NAME}} ] || \
        [ -z {{.JENKINS_URL}} ] || \
        [ $(jq '.branch_type | index( "release" )' ./__build_info/mxpack/git_info.json) = "null" ]

  publish-flow:
    desc: Run CD
    cmds:
      - task ci:publish:conda
      - task ci:publish:pypi
      - task ci:publish-docs
      - task ci:push-version

  push-version:
    desc: push bumped version
    cmds:
      - "{{.DENV_EXE}} {{.VENV_EXE}} build run task version:push-bump"
    status:
      - "[ -z {{.JOB_NAME}} ] || [ -z {{.JENKINS_URL}} ]"

  pre-build:write:
    desc: _
    cmds: ["{{.DENV_EXE}} {{.VENV_EXE}} build run task version:info:prebuild:write"]

  bump-version:
    desc: bump version with commit and push
    cmds:
      - "{{.DENV_EXE}} {{.VENV_EXE}} build run task version:bump"
      - "{{.DENV_EXE}} {{.VENV_EXE}} build run task version:commit-bump"
    status:
      - "[ -z {{.JOB_NAME}} ] || [ -z {{.JENKINS_URL}} ]"

  report:
    desc: Send accumelated info during flow ie test cov and build times, to elasticsearch
    cmds:
      - "{{.DENV_EXE}} {{.VENV_EXE}} build run task report:report || true"
    status:
      - "[ -z {{.JOB_NAME}} ] || [ -z {{.JENKINS_URL}} ]"

  cleanup:soft:
    desc: _
    cmds:
      - "{{.DENV_EXE}} rm -rf __build_info __local_build__|| true"
      - rm -rf {{.PACKAGE_IMPORT_NAME}}/_resources_ || true

  cleanup:hard:
    desc: _
    cmds:
      - task ci:cleanup:soft
      - |
        {{.DENV_EXE}} task conda:venv:remove:all
      - rm -rf {{.LOCAL_WORK_DIR}}/*

  copy-pkg-resources:
    desc: copy package resources into package
    cmds:
      - mkdir -p __build_info
      - mkdir -p {{.PACKAGE_IMPORT_NAME}}/_resources_
      - touch {{.PACKAGE_IMPORT_NAME}}/_resources_/__init__.py
      - |
        zip -q -r {{.PACKAGE_IMPORT_NAME}}/_resources_/__build_info.zip \
        __build_info \
        -x '*.vscode/*' \
        -x '*.idea/*' \
        -x '*.ipynb_checkpoints/*' \
        -x '*.ipynb_checkpoints/*' \
        -x '*.git/*' \
        -x '*.pyc' \
        -x '*__localbuild__/*' \
        -x '*__deps_localbuild__/*' \
        -x '*__pycache__/*' \
        -x '*.pytest_cache/*' \
        -x '*.build_info/*' \
        -x '*.empty*'
